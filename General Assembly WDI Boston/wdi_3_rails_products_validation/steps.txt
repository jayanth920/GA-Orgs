# Create a Products Controller with an index action

$ touch app/controller/products_controller.rb

# In this file add:
class ProductsController < ApplicationController
  def index
  end
end


# Go to http://localhost:3000/products
# You should get an error: No route matches [GET] "/products"
# Need to add a route for this Controller action.
# Add this to the routes.rb file

  # Maps the URL to a controller#action
  get '/products', to: 'products#index'

  # get - HTTP GET method to match.
  # '/products'  - Path in the URL to match
  # 'products#index' - Indentifies the Controller and Action to
  # invoke.

# Create a view for the Products index actiion. 
mkdir app/views/products
touch app/views/products/index.html.erb

# Add some text into this index view the goto http://localhost:3000
  "Hello from the index.html.erb view. I got here via the controller: product, action: index"

# Lets draw what is going on here? 
  

# Add this to the Products index action
  # This will render the index view.
  # Don't need this because by default an action will
  # render a view that has the same name as the action.
  render :index


# OK, lets add binding.pry to the index action and refresh your
  browser.
# Now you should be in the index action.
# looks at the params hash. Notice it has two entries, one for the 
# the name of the controller and one for the name of the action.

# Lets use the params hash in the view.
  Hello from the index.html.erb view. I got here via the controller:
  <%= params[:controller]} %>, <%= action: #{params[:action]} %>


# Now we are going to show ALL of the products in this applications
  DB.
# Add this to the index action

  # Create an instance variable, @products, that will contain an
    "Array" of all the products.
  @products = Product.all

# In the index view add:
<ul>
<% @products.each do |product| %>
  <li>Product <%=product.name%>, price is <%= product.price %></li>
<% end %>
</ul>


# This will iterate over all of the products show each one's name and
  price.

http://localhost:3000/products


# LAB: Create the correct components to display all Songs. 
# Pretty much like the above.
# (Look in the db/schema.rb to find the structure, attributes, for a
# Song).

# Now lets create an action that will show ONE product.
# create a route in the routes file
get '/products/:id', to: 'product#show'

# Add a show action to the products controller
def show
    @product = Product.find(params[:id])
end

# Add a binding.pry in the show action and look at the params hash.
# How is this used in the show action?
# How does the new entry in the params hash relate to the rule for this 
# show view?

# Add show view to show off the product.

# LAB: Create the correct components to display ONE Song. 
# Pretty much like the above.
# (Look in the db/schema.rb to find the structure, attributes, for a
# Song).

# Lets look at the layout file. Where is it? What does it do it.

# Add this to the layout in the body tag.
<h3>Honest Tom's Products</h3>

# Add a structure, maybe the structure used by bootstrap in the
  layout. Bunch of divs with or html tags for header, wrapper,
  container or footer.

# The <%= yield %> in the layout will be replaced by the output
  generated by the view.



