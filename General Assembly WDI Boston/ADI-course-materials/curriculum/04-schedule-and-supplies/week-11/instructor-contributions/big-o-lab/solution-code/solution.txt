Problem 1:

func sumArray(var A as array of length n)
    var sum as int = 0
    for i from 0 to n - 1
        sum += A[i]
    return sum
end func

Running time: O(n)
Explanation: The loop runs n times. Inside each loop iteration, one assignment/increment operation is performed.
    n loops * 1 operation = n total operations. This yields O(n) total running time.

----------------------------------------------------------------

Problem 2:

func sumMatrix(var A as n x n matrix) // A matrix can be represented as an array of arrays, from A[0][0] to A[n][n]
    var sum as int = 0
    for i from 0 to n - 1
        sum += sumArray(A[i])
    return sum
end func

Running time: O(n^2)
Explanation: The loop runs n times. Inside each iteration of the loop, sumArray is called, which has O(n) running time.
    There is one addtional operation as the return value from sumArray is assigned to the local variable sum.
    This means there are n loops * ( O(n) + 1 operations per loop ) for a toal of O(n^2) operations.

----------------------------------------------------------------

Problem 3:

func countDivisionsByTwo(var n as int)
    var count as int = 0
    var i as int = n
    while i >= 1
        count++
        i = i / 2
    return count
end func

Running time: O(log(n))
Explanation: Since i is halved in each iteration of the while loop, the loop will run log_2(n) times (log-base-2 of n).

    To check this, work backwards from the last iteration, where i = 1, to the first iteration, where i = n.
    If you start with i = 1 and double it over and over (the opposite of halving it, since we're working backwards
    for this check) that's like raising 2 to a power (i.e. 2 * 2 * 2 * ...) so that you end up with n.
    If 2^x = n, then x = log_2(n).
    
    Inside each iteration of the while loop, two operations are performed: an increment, and an assignment.
    This means the total number of operations performed is log_2(n) * 2 = 2log(n) = O(log(n)) because
    we can drop the constant term.

----------------------------------------------------------------

Problem 4:

func arrayMax(var A as array of length n)
    var currentMax as int = A[0]
    for i from 0 to n - 1
        if A[i] > currentMax then
            currentMax = A[i]
    return currentMax
end func

Running time: O(n)
Explanation: The loop runs n times. Inside the loop, one comparison operation and possibly one assigment
    operation are performed. This gives us n * 2 total operations, and 2n = O(n) because we can drop the
    constant term.

----------------------------------------------------------------

***BONUS*** Problem 5:

func bonusFunction(var n as int)
    var total as int = 0
    for i from 1 to n
        for j from 1 to n
            total += 1
        for k from 1 to 2 * n
            total += 1
            var m as int = 0
            while (m < 3 * n)
                total += 1
                m += 2
    return total
end func

Running time: O(n^3)
Explanation: The i loop runs n times. Inside each iteration if the i loop, the j loop runs n times with one operation
    performed per iteration. After the j loop finishes, the k loop runs 2 * n times. Inside the k loop, 1 operation is 
    performed, then the m loop runs 3/2 * n times. Inside the m loop, two more operations are performed.
    This gives us n times thru the i loop * ( (n times thru the j loop * 1 operation) + (2n times thru the k loop
        * (1 operation + (3/2n times thru the m loop * 2 operations))))
            = n * (n + 2n * ( 1 + (3/2n * 2) ) )
            = n(n + 2n(3n + 1))
            = n(n + 6n^2 + 2n)
            = n(6n^2 + 3n)
            = 6n^3 + 3n^2
            = O(n^3) because we can drop the n^2 term since the n^3 term is the most significant term,
                and we can drop the constant 6 for the same reason
