## Rails API
 We will create an simple Rails JSON API using the [rails api gem](https://github.com/rails-api/rails-api)
 
 This github repo will contain the Rails API that is generated by following the steps below.
 
 We'll be using two gem to generate a JSON API, [Rails API Gem](https://github.com/rails-api/rails-api) and [Active Model Serializer](https://github.com/rails-api/active_model_serializers)

#### Lab 
Watch the [rails api railscast](http://railscasts.com/episodes/348-the-rails-api-gem).

#### Demo
 Create a JSON API that will allow _Users_ to _Comment_ on _Articles_.
 
* Install the rails-api gem  
  ``gem install rails-api`` 

* Generate an articles api app.  
  ``rails-api new articles_api -d postgresql -T``  
  ``cd articles_api``

Notice that app/views directory is missing. And the Gemfile is pretty bare.

* Generate a Article resource with scaffolding.  
  ``rails g scaffold Article title body:text``  
	
Notice that this scaffold generator creates much less than is typically generated.

* Generate a User model.  
  ``rails g model User email``

* Generate a Comment model.  
  ``rails g scaffold Comment body:text user:belongs_to article:belongs_to``  

Comments are just a join model between a specific user and article. The comment only contains a body that holds the comment content.

* Copy the seed file from this repos db/seeds.db to the articles_api/db/seeds.db.  
	``cp <path to this repo>/db/seeds.rb <path to articles_api>/db/seeds.rb``  

* Create and seed the DB.  
  ``rake db:create``  
  ``rake db:migrate``

This will create 30 Users, 10 Articles	and and each Article will have some Comments. _Take a look at the seed file if your curious._

* Look at the articles controller.  
It has all the actions BUT only outputs a JSON "Representation" of the resource. Previously we where always outputting a HTML "Representation" of the resource.

* Check out the routes.rb.  
Why don't we need the new and edit action?

This is Article resource is truely a RESTFUL resource. Not cluttered up with actions to create forms.

* Add a root route for articles index.  
  ``root 'articles#index'``

* Add faker to the Gemfile and bundle.  
	``gem faker``   

* Start the server. And we see all the Articles!!!!

#### Lab

Read [JSON API with rails-api and active_model_serializers](http://adamniedzielski.github.io/blog/2014/03/02/json-api-with-rails-api-and-active-model-serializers/)

#### Demo
Change the JSON representation for Articles and Comments.

* Add the active_model_serializers gem to the Gemfile and bundle.
	``gem 'active_model_serializers`` 

* Generate a serializer for the Article resource.  
	``rails g serializer article``

* Add the title and body attributes in the serializer. 
  `attributes :id, :title, :body`

This will constrain/limit the JSON returned for an Article to show only the id , title, body. 

* restart server and got to the root.

Notice that the updated_at and created_at columns are missing!
We usually don't want to show these.

* Lets get rid of the root node in the JSON generated. 
	
 Add this to the Articles controller.
 
	def default_serializer_options  
	  {root: false}
	end


* Lets embed comments for each article in the JSON.

Add this to the Article serializer.  
	``has_many :comments``

* Generate a serializer for comment and add the body attribute.  
	``rails g serializer Comment`` 

Now the comment only show it's id and body.

* Lets show the comment creator and user that commented. Add this to the Comment serializer.  
	``attributes :id, :body, :creator``

	  def creator
    	"#{object.user.email}"
	  end
	 
#### Lab 
Create a JSON API for a Song Playlist. A _Song_ will have a title, artist, duration and price. An _User_ will have a name and email. A _Playlist_ will be a join btw Songs and Users.

Use the curl command and the Chrome debugger to show the JSON returned from the Song Playlist API.

